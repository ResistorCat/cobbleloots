plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc:fabric-language-kotlin:$rootProject.fabric_kotlin_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "com.cobblemon:fabric:$rootProject.cobblemon_version"

    ////////////////////////////
    // DEBUGGING DEPENDENCIES //
    ////////////////////////////
    // modImplementation "curse.maven:jade-324717:6291536"
    // modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    ////////////////////////////

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.properties([
        'mod_id'          : project.mod_id,
        'mod_version'     : project.mod_version,
        'mod_version_type': project.mod_version_type,
        'mod_name'        : project.mod_name,
        'mod_description' : project.mod_description,
        'mod_authors'     : project.mod_authors,
        'mod_license'     : project.mod_license,
        'mod_logo'        : project.mod_logo,
        'mod_homepage'    : project.mod_homepage,
        'minecraft_version': project.minecraft_version,
    ])

    filesMatching('fabric.mod.json') {
        expand([
            'mod_id'          : project.mod_id,
            'mod_version'     : project.mod_version,
            'mod_version_type': project.mod_version_type,
            'mod_name'        : project.mod_name,
            'mod_description' : project.mod_description,
            'mod_authors'     : project.mod_authors,
            'mod_license'     : project.mod_license,
            'mod_logo'        : project.mod_logo,
            'mod_homepage'    : project.mod_homepage,
            'minecraft_version': project.minecraft_version,
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
